---
toc-title: '![](imgs/penguin_drawing_table.png){width=80%}<br> Tabellen'
---

# Erstellung von APA-konformen Tabellen {#sec-tables}

```{r}
#| include: false

library(tidyverse)
```


## Export mit `apaTables`

Wie am Anfang gesagt wollen wir möglichst vermeiden, Tabellen und Daten a) händisch zu übertragen und b) zu formatieren.

Im besten Fall exportieren wir also alles was an Zahlen und Tabellen für den Text anfällt direkt in files, die wir einfach einbinden können.

Für die ANOVAs, Regressionen, t-Tests und Korrelationsanalysen gibt es im [`apaTables`-Paket](https://www.rdocumentation.org/packages/apaTables) fertige Wrapper, die einen direkten Export der Tabellen ins RTF-Format umsetzen.

Unter den folgenden Links findet Ihr die Dokumentation der einzelnen Funktionen aufgelistet:

* [Korrelationsanalyse](https://dstanley4.github.io/apaTables/reference/apa.cor.table.html)
* [ANOVA mit ezANOVA](https://dstanley4.github.io/apaTables/reference/apa.ezANOVA.table.html)
* [Regressionsanalyse](https://dstanley4.github.io/apaTables/reference/apa.reg.table.html)
* [Zusammenfassungstabelle für deskriptive Maße, 1 Faktor](https://dstanley4.github.io/apaTables/reference/apa.1way.table.html)
* [Zusammenfassungstabelle für deskriptive Maße, 2 Faktoren](https://dstanley4.github.io/apaTables/reference/apa.2way.table.html)

Außerdem sind im [Tutorial](https://dstanley4.github.io/apaTables/articles/apaTables.html) Beispiele für alle implementierten Verfahren und Tabellen zu finden.

Wir können zum Beispiel mit ezAnova eine Varianzanalyse für unsere Pinguine durchführen, bei der wir Pinguin-Geschlecht und Spezies als UVs und die Flossenlänge als AV nutzen:

```{r}
library(ez)

palmerpenguins::penguins %>% 
  mutate(id = seq_along(species)) %>% 
  filter(!is.na(flipper_length_mm)) %>% 
  ezANOVA(wid = id,
          between = .(species, sex),
          dv = flipper_length_mm,
          detailed = T,
          type = 2)
```

Mit `apa.ezANOVA.table` können gewünschte Tabellen dann exportiert werden. Laut der Doku ist dabei noch wichtig, mit `options` eine Anzahl an Dezimalstellen vor Umwandlung in 10-er-Potenz-Notation zu setzen, die mindestens 10 ist.

```{r}
library(apaTables)
options(digits = 10)

palmerpenguins::penguins %>%
  mutate(id = seq_along(species)) %>%
  filter(!is.na(flipper_length_mm)) %>%
  ezANOVA(
    wid = id,
    between = .(species, sex),
    dv = flipper_length_mm,
    detailed = T,
    type = 2
  ) %>%
  apa.ezANOVA.table(drink_attitude_results,
                    table.number = 1,
                    filename = "Table1_APA.doc")

```

```{r}
#| include: false
file.remove("Table1_APA.doc")
```


Das `table_number`-Argument setzt dabei nur die Zahl in der Tabellen-Überschrift.


Das Ergebnis ist in @fig-apaTable zu sehen.


![Output von `apa.ezANOVA.table`](imgs/apaEZTable.png){#fig-apaTable}

Das ist natürlich schon schön und praktisch wenn wir uns englische Tabellen für die implementierten Analysen ausgeben lassen wollen. Aber wie können wir eigene Tabellen nach APA-Richtlinien-konform exportieren?


## Tabellen mit `flextable`

Was sind die Anforderungen an Tabellen laut APA?
Konsultieren wir nochmal Julias^[Nochmal Danke, [Julia](https://www.methoden.psychologie.uni-kiel.de/de/team/julia-liss)!] Folien (@fig-apaTableChecklist).

![Checklist für Tabellen aus Julias Folien](imgs/apa_tables.png){#fig-apaTableChecklist}

Unsere Tabellen müssen also die folgenden Anforderungen erfüllen:

1. Jede Spalte muss eine Überschrift haben
2. die Überschriften müssen zentriert sein

Außerdem kommen noch die folgenden Anforderungen an die Formatierung statistischer Ergebnisse^[laut [https://apastyle.apa.org/style-grammar-guidelines/tables-figures/tables](https://apastyle.apa.org/style-grammar-guidelines/tables-figures/tables) und [https://www.scribbr.com/apa-style/numbers-and-statistics/](https://www.scribbr.com/apa-style/numbers-and-statistics/)] hinzu:

3. Namen statistischer Kennwerte sollen kursiv sein
4. Zahlen sollen auf den Wert gerundet werden, bei dem Präzision erhalten wird
5. Werte die nicht größer als 1 werden können sollen keine Null vor dem Komma haben

Fangen wir mit der Formatierung der Nummern an. Als Beispiel haben wir die folgende Tabelle, in der die mittlere Schnabellänge und Standardabweichung pro Pinguin-Spezies und Beobachtungsort abgetragen sind:

```{r}
summary_table <- palmerpenguins::penguins %>%
  group_by(species, island) %>%
  summarise(across(matches("bill_length_mm"),
                   .fns = list(
                     M = \(x) mean(x, na.rm = T),
                     SD = \(x) sd(x, na.rm = T)
                   ),
                   .names = "{.col}_{.fn}")) %>% # Damit Funktion hinten steht
  pivot_wider(names_from = 'island',
              values_from = 3:4,
              names_glue = "{island}_{.value}") # Damit Insel vorne steht
summary_table
```

Zuerstmal sortieren wir die Spalten so, dass Pro Ort erst Mittelwert, dann SD steht:

```{r}
summary_table %>% 
  select(species, matches('Bis'), matches('Dre'), matches('Tor'))
```

Dann legen wir die Dezimalstellen auf eine Nachkommastelle fest:

```{r}
summary_table %>% 
  select(species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1)))
```

Und schon können wir an die eigentliche Formatierung in einer Tabelle gehen. 
Dazu nutzen wir das Paket [`flextable`](https://ardata-fr.github.io/flextable-book/).

Wir können unsere Tabelle direkt in flextable pipen:

```{r}
library(flextable)
summary_table %>% 
  select(species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  flextable()
```

Als erstes können wir den Header trennen:

```{r}
summary_table %>% 
  select(species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  flextable() %>% 
  separate_header()
```

Die `bill-length` kann weg, am besten entfernen wir die schon vor der Umwandlung in eine `flextable`:

```{r}
summary_table %>% 
  select(species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  rename_with(.fn = ~str_remove(.,'bill_length_mm')) %>% 
  flextable() %>% 
  separate_header()
  
```

"Spezies" können wir auch in deutsch übertiteln:

```{r}
summary_table %>% 
  select(Spezies = species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  rename_with(.fn = ~str_remove(.,'_bill_length_mm')) %>% 
  flextable() %>% 
  separate_header()
```


Und die statistischen Kennwerte kursiv setzen:

```{r}
summary_table %>% 
  select(Spezies = species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  rename_with(.fn = ~str_remove(.,'_bill_length_mm')) %>% 
  flextable() %>% 
  separate_header() %>% 
  style(i = 2,part = 'header',
        pr_t = fp_text_default(italic = T))
```

Im `flextable`-Paket gibt es außerdem die `theme_apa`-Funktion, die den Text und die Abstände nach APA formatiert:

```{r}
summary_table %>% 
  select(Spezies = species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  rename_with(.fn = ~str_remove(.,'_bill_length_mm')) %>% 
  flextable() %>% 
  separate_header() %>%
  italic(part ="header", i= 2) %>% 
  theme_apa()
```


Außerdem können wir Linien unter den Inseln einfügen:

```{r}
summary_table %>% 
  select(Spezies = species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  rename_with(.fn = ~str_remove(.,'_bill_length_mm')) %>% 
  flextable() %>% 
  separate_header() %>%
  italic(part ="header", i= 2) %>% 
  theme_apa() %>% 
  hline(i = 1, j = -1,part = 'header', 
        border= list(width = 0.1, color = "black", style = "solid"))
```


Und abschließend exportieren:

```{r}
summary_table %>% 
  select(Spezies = species, matches('Bis'), matches('Dre'), matches('Tor')) %>% 
  mutate(across(where(is.numeric), ~round(., 1))) %>% 
  rename_with(.fn = ~str_remove(.,'_bill_length_mm')) %>% 
  flextable() %>% 
  separate_header() %>%
  italic(part ="header", i= 2) %>% 
  theme_apa() %>% 
  hline(i = 1, j = -1,part = 'header', 
        border= list(width = 0.1, color = "black", style = "solid")) %>% 
  save_as_docx(path = 'flextable_out.docx')
```

```{r}
#| include: false
file.remove('flextable_out.docx')
```

Der Export ist in @fig-flextableOut zu sehen.

![Export des flextable-calls.](imgs/flextable_out.png){#fig-flextableOut}

:::: {.columns}
:::{.column width="20%"}
![](imgs/frustrated_penguin.png){width=80%}
:::
:::{.column width="80%"}
> Aber da muss ich ja die Beschreibung doch noch nachträglich einfügen! Und was soll ich mit 15 einzelnen docs, dann muss ich ja doch alles rüberkopieren!
:::
::::



Natürlich gibt es da auch eine Lösung! Auftritt [`quarto`](quarto.html).

## Aufgabe

1. Erstelle eine Tabelle mit den deskriptiven Kennwerten der Blütenblatt-Länge im `iris`-Datensatz mit `apaTables`. Guck Dir dafür [die Dokumentation der `apa.1way.table`-Funktion](https://dstanley4.github.io/apaTables/reference/apa.1way.table.html) an.

2. Baue dieselbe Tabelle mit `flextable` nach.