{
  "hash": "f18adb6f22ee45fe921147721595f978",
  "result": {
    "markdown": "---\ntoc-title: '![](../imgs/grid_penguin.png){width=80%}<br> ggplot2'\n---\n\n\n# Die *Grammar of graphics* und `ggplot2` {#sec-ggplot}\n\n\n\n\n\n\n## Grammar of graphics\nHadley Wickhams Paket `ggplot2` versucht, die Erstellung von Grafiken in einer einheitlichen Grammatik, der \"grammar of graphics\", auszudrücken. Das Ziel hier ist es, nicht mehr in \"Scatterplot\" und \"Boxplot\" als einzelne Kategorien zu denken und diese einzeln erstellen lernen zu müssen, sondern alle Abbildungen mit derselben Logik erstellen zu können.\n\nIn Seinem Paper [@wickhamLayeredGrammarGraphics2010] werden die folgenden Komponenten als grundlegende Bausteine einer Grafik eingeführt:\n\n>* a default dataset and set of mappings from variables to aesthetics,\n* one or more layers, with each layer having one geometric object, one statistical trans-\nformation, one position adjustment, and optionally, one dataset and set of aesthetic\nmappings,\n* one scale for each aesthetic mapping used,\n* a coordinate system,\n* the facet specification. *[@wickhamLayeredGrammarGraphics2010, p.8]*\n\n\n### Komponenten eines Plots\nWir müssen für einen Plot also überlegen:\n\n1. welche *Daten* wir auf welche *Aesthetics* mappen\n2. welche *geometrischen Objekte* wir in welcher Reihenfolge auf die Grafik layer wollen und ob diese optionale andere Daten benötigen\n3. welche *Skala* wir für die Mappings nutzen wollen\n4. welches *Koordinatensystem* wir nutzen wollen\n5. in welchen *Facetten* wir die Daten darstellen wollen\n\n\n## Komponenten in `ggplot2`\n\n#### Beispieldaten\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n![Pinguine im Eis](../imgs/palmer_penguins.png){width=80%}\n:::\n\n::: {.column width=\"60%\"}\nIm `palmerpenguins`-Paket werden Pinguin-Beobachtungen der [Palmer-Station in der Antarktis](https://pallter.marine.rutgers.edu/) zur Verfügung gestellt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n:::{.panel-tabset}\n\n### 1. Daten und Aesthetics - `ggplot()` + `aes()`\n\n\nWir wollen den Zusammenhang zwischen Körpergewicht und Schnabellänge über die Spezies betrachten. \nDafür legen wir die \"Leinwand\" des Plots mit den zentralen mappings an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species))\n```\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### 2. Geometrische Objekte - `geom_*`\n\nDiesem Plot fügen wir Punkte als geometrische Objekte hinzu, die uns zu einem Scatterplot führen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nWir als weiteres geometrisches Objekt könnten wir uns zum Beispiel wünschen, die Mittelwerte pro Gruppe mit den Abweichungen auf x- und y-Achse darzustellen.\nDazu müssen wir zuerst diesen neuen Datensatz berechnen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_means <- palmerpenguins::penguins %>% \n  group_by(species) %>% \n  summarise(across(c(bill_length_mm, body_mass_g), ~mean(., na.rm=T)))\n```\n:::\n\n\n...und auf den Plot in einem neuen Layer hinzufügen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point() +\n  geom_point(data=penguin_means)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nFür den Layer können wir auch speifische geometrische Eigenschaften einfügen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point() +\n  geom_point(data=penguin_means, shape = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nOder direkt ein neues Mapping einführen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original')) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nUnd auch beide Varianten kombinieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### 3. Skalen - `scale_*`\n\n\nDie Symbole und Farben haben genau wie x- und y- Koordinaten als ästhetische Mappings eigene Skalen. Wenn uns also die Farben nicht passen, können wir einfach eine andere Skala setzen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nGenauso können wir einfach die Skala der Symbole an unsere Wünsche anpassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(original = 20, mean = 3))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### 4. Koordinatensystem `coord_*`\n\nDas Koordinatensystem passt von der Auflösung erstmal, aber wir wollen eine direkte Zuordnung von 10 mm Schnabellänge zu 1000 g Körpermasse. Dazu fügen wir eine `coord_*`-Spezifikation an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(original = 20, mean = 3))+\n  coord_fixed(ratio = 10/1000)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### 5. Facetten - `facet_*`\n\nAls letzte Komponente überlegen wir uns, dass die verschiedenen Beobachtungspunkte als Einteilung interessant sein könnten und wir diese getrennt betrachten wollen. Um diese Facettierung umzusetzen ergänzen wir zuerst den Mittelwerts-Datensatz um den Beobachtungsort:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_means <- palmerpenguins::penguins %>% \n  group_by(species, island) %>% \n  summarise(across(c(bill_length_mm, body_mass_g), ~mean(., na.rm=T)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n\nUm dem Graphen anschließend die Facettierung anzufügen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(original = 20, mean = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## APA-Styling\n\nAus Julias Folien^[Danke [Julia](https://www.methoden.psychologie.uni-kiel.de/de/team/julia-liss)!] kommt folgende Checkliste für APA-Grafiken:\n\n![Screenshot der APA-Checkliste](../imgs/apa_graphs.png)\n\nWir müssen also noch\n\n* die Elemente klar labeln\n* sicherstellen dass der Font passt\n* die Legende unter dem Bild anordnen\n* die Beschriftung der Legende überprüfen\n\nDaneben habe ich noch ein persönliches Problem mit dem grauen Hintergrund, damit fangen wir an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(original = 20, mean = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island) +\n  theme_light()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIn diesem Zusammenhang können wir auch gleich Base-Font und Schriftgröße setzen. `theme_light` setzt die kleinste Schriftgröße auf .8 * die `base_size`, wenn wir minimal 8pt große Schrift haben wollen.\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(original = 20, mean = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island) +\n  theme_light(base_family = 'Helvetica',\n              base_size = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAls nächstes die Anpassung der Achsen- und Legenden-Labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'mean'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(original = 20, mean = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island) +\n  theme_light(base_family = 'Helvetica',\n              base_size = 10) +\n  labs(x = 'Schnabellänge (mm)',\n       y = 'Körpergewicht (g)',\n       color = 'Pinguin-Spezies',\n       shape = 'Aggregations-Niveau')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nDie Namen der Formen sind noch nicht title-cased, das können wir am einfachsten in der Definition ändern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'Original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'Mittelwert'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(Original = 20, Mittelwert = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island) +\n  theme_light(base_family = 'Helvetica',\n              base_size = 10) +\n  labs(x = 'Schnabellänge (mm)',\n       y = 'Körpergewicht (g)',\n       color = 'Pinguin-Spezies',\n       shape = 'Aggregations-Niveau')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nDie Legende muss dann noch an die Unterseite des Graphen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'Original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'Mittelwert'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(Original = 20, Mittelwert = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island) +\n  theme_light(base_family = 'Helvetica',\n              base_size = 10) +\n  labs(x = 'Schnabellänge (mm)',\n       y = 'Körpergewicht (g)',\n       color = 'Pinguin-Spezies',\n       shape = 'Aggregations-Niveau') +\n  theme(legend.position = 'bottom')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nUnd damit ist die Formatierung fertig.\n\n\n## Convenient Standards\n\nDie beiden `theme`-Funktionen müssten wir so an jede Grafik anfügen. Solche Wiederholungen sind schlechter Stil und stören beim Lesen des Skripts, deswegen bietet `ggplot2` convenience-Funktionen um allgemeine Einstellungen zu setzen. Mit dem folgenden Snippet am Anfang des Skripts werden die Standards für alle Grafiken genutzt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_theme <-  theme_light(base_family = 'Helvetica',\n              base_size = 10) +\n  theme(legend.position = 'bottom')\n\ntheme_set(my_theme)\n```\n:::\n\n\nSo kann ich jetzt einfach Beispielsweise ein eingefärbtes Histogramm für die Flossen-Länge mit den gesetzten Standards erstellen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins %>% \n  ggplot(aes(x = flipper_length_mm,\n             fill = sex)) +\n  geom_histogram(binwidth = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](graphics_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Export\n\nZum Abschluss können wir die Grafiken exportieren.\n\nDie Textgröße ist in pt gesetzt, deswegen sollten wir nach dem Export die Größe im besten Fall nicht mehr viel ändern.\n\nEine Din A4-Seite ist 8.2 x 11.6 Zoll groß. Wenn wir eine Grafik auf 80% der Seitenbreite haben wollen, brauchen wir also eine 6.56 Zoll breite Grafik.\n\nZum Speichern setzen wir unsere Grafik und die Maße in ggsave ein:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- palmerpenguins::penguins %>% \n  ggplot(aes(x = bill_length_mm, \n             y = body_mass_g,\n             color = species)) + \n  geom_point(aes(shape = 'Original'),\n             alpha = .5) +\n  geom_point(data=penguin_means,\n             aes(shape = 'Mittelwert'),\n             size = 3) +\n  scale_color_viridis_d(end = 0.7) +\n  scale_shape_manual(values = c(Original = 20, Mittelwert = 3))+\n  coord_fixed(ratio = 10/1000) +\n  facet_wrap(~island) +\n  labs(x = 'Schnabellänge (mm)',\n       y = 'Körpergewicht (g)',\n       color = 'Pinguin-Spezies',\n       shape = 'Aggregations-Niveau')\n\nggsave(plot = p,\n       filename = '../imgs/penguin_scatter.png',\n       width = 6.56,units = 'in')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 6.56 x 5 in image\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n:::\n\n\n\nDer Export sieht so aus:\n\n![Exportierte Grafik](../imgs/penguin_scatter.png)\nErstens können wir schonmal feststellen dass die Grafik ruhig schmaler werden kann. Die Export-Funktion hat uns eine Höhe von 6.74 Inches mitgeteilt, das können wir ruhig auf 4 inches reduzieren.\n\nZweitens ist die Legende ein bisschen kaputt gegangen.\n\nDazu gibt es vier Möglichkeiten zur Anpassung:\n\n::: {.panel-tabset}\n\n### Legende mit Zeilenumbrüchen\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_linebreaks <- p +\n  guides(color = guide_legend(nrow = 3),\n         shape = guide_legend(nrow = 2))\n\nggsave(plot = p_linebreaks,\n       filename = '../imgs/penguin_scatter_linebreaks.png',\n       width = 6.56, height = 4, units = 'in')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n:::\n\n\n![Grafik mit Legende mit Linebreaks](../imgs/penguin_scatter_linebreaks.png)\n\n\n### Legende mit kleinerem Text\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_smaller_text <- p +\n  theme(legend.title = element_text(size = 10,\n                                    colour = 'darkgrey'))\n\nggsave(plot = p_smaller_text,\n       filename = '../imgs/penguin_scatter_smaller_text.png',\n       width = 6.56, height = 4,units = 'in')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n:::\n\n\n![Grafik mit kleineren Legenden-Überschriften](../imgs/penguin_scatter_smaller_text.png)\n\n### Legende im Graphen\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_legend_in_plot <- p + \n  theme(\n    # Legende an oberer rechter Ecke orientieren\n    legend.justification=c(1,1),\n    # Legende an obere rechte Ecke schieben\n    legend.position=c(1,0.98), \n    # Legenden-Hintergrund fast transparent machen\n    legend.background = element_rect(fill = rgb(1,1,1,.5)),\n    # Hintergrund der Legenden-Felder fast transparent machen\n    legend.key = element_rect(fill = rgb(1,1,1,.5)))\n\nggsave(plot = p_legend_in_plot,\n       filename = '../imgs/penguin_scatter_legend_in_plot.png',\n       width = 6.56, height = 4,units = 'in')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n:::\n\n\n![Grafik mit Legende in plot-Region](../imgs/penguin_scatter_legend_in_plot.png)\n\n:::\n\n## Hilfreiche Links\n\n* für einen Überblick über alle möglichen Kompenenten empfiehlt sich [das von posit herausgegebene cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/data-visualization.pdf)\n\n* [das Kapitel zu Datenvisualisierungen](https://r4ds.hadley.nz/data-visualize.html) in @grolemundDataScience2016 ist sehr gut und geht weiter ins Detail als hier möglich ist\n\n* Im Paket [ggpubr](https://rpkgs.datanovia.com/ggpubr/) wird `ggplot2` genutzt um eine Reihe von \"publication ready plots\" zu erstelllen\n\n* Unter [diesem Link](https://shiny.gmw.rug.nl/ggplotgui/) ist eine shiny-App zur interaktiven Erstellung von ggplot-Graphen zu finden\n\n* Unter [diesem Link](http://www.cookbook-r.com/Graphs/) findet sich eine Sammlung von Farben, Formen, usw., die mit ggplot nutzbar sind.\n\n## Aufgabe\n\n\n\n\n\n\n1. Lese den [im Repo zu diesem Skript](https://raw.githubusercontent.com/MBrede/r_thesis_tools/main/data/example.csv) zur Verfügung gestellten Datensatz `example.csv` ein. Dazu kann einfach der folgende Chunk genutzt werden:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv('https://raw.githubusercontent.com/MBrede/r_thesis_tools/main/data/example.csv')\n```\n:::\n\n\n\n2. Stelle die Reaktionszeiten und Accuracies in einem Scatterplot dar.\n\n3. Färbe den Graphen nach Gruppen ein\n\n4. Füge Mittelwerte und Standardabweichungen pro Gruppe hinzu. Füge die Standardabweichungen dabei mit `geom_linerange` in zwei layern hinzu (einem für die x- und einem für die y-Richtung)\n\n5. Passe die Grafik so an, dass sie APA-konform ist\n\n6. Mache die Grafik so unästhetisch, wie es die APA-Richtlinien zulassen. [Hier](http://www.cookbook-r.com/Graphs/) sind Fonts, Farben und Formen zu finden.\n\n\n\n",
    "supporting": [
      "graphics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}