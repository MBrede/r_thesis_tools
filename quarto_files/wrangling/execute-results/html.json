{
  "hash": "4b075aab3baac6e616d284c7ea1dabbf",
  "result": {
    "markdown": "---\ntoc-title: '![](../imgs/penguin_wrestling_files.png){width=80%}<br> File-Wrangling'\n---\n\n\n# Import und Aufbereitung von Psychopy-Daten\n\n## Batch-Import\n\n\n\n\n\nPsychopy und Pavlovia schreiben Ihre Daten im long-Format raus, die dem kommenden Beispiel ähneln:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv('../data/1_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv') %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 47 Columns: 20\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(9): Bild, weiter_Willkommen.keys, Ergebnisse, Sicherheit, key_resp.key... dbl\n(10): Ergebnisse_Loop.thisRepN, Ergebnisse_Loop.thisTrialN, Ergebnisse_L... lgl\n(1): ...20\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...20`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 20\n  Bild   Ergeb…¹ Ergeb…² Ergeb…³ Ergeb…⁴ weite…⁵ weite…⁶ Entsc…⁷ Ergeb…⁸ Siche…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl> <chr>     <dbl>\n1 <NA>        NA      NA      NA      NA space      5.49      NA <NA>         NA\n2 Tabel…       0       0       0      44 <NA>      NA          1 andere…       1\n3 Tabel…       0       1       1      10 <NA>      NA          1 andere…       3\n4 Tabel…       0       2       2      32 <NA>      NA          1 andere…       4\n5 Tabel…       0       3       3      40 <NA>      NA          1 andere…       1\n6 Tabel…       0       4       4      16 <NA>      NA          1 andere…       3\n# … with 10 more variables: Sicherheit <chr>, key_resp.keys <chr>,\n#   key_resp.rt <dbl>, participant <dbl>, session <chr>, date <chr>,\n#   expName <chr>, psychopyVersion <chr>, frameRate <dbl>, ...20 <lgl>, and\n#   abbreviated variable names ¹​Ergebnisse_Loop.thisRepN,\n#   ²​Ergebnisse_Loop.thisTrialN, ³​Ergebnisse_Loop.thisN,\n#   ⁴​Ergebnisse_Loop.thisIndex, ⁵​weiter_Willkommen.keys, ⁶​weiter_Willkommen.rt,\n#   ⁷​Entscheidung.response, ⁸​Ergebnisse, ⁹​Sicherheit_Entscheidung.response\n```\n:::\n:::\n\n\nDie Daten oben kommen aus einer FOV-Studie aus dem WS21 in der untersucht wurde, wie sicher sich Proband:innen bei der Entscheidung für einen t-Test oder einen anderen Test basierend auf Levene- und KS-Test-*p*-Werten sind und wie sehr sie sich in ihrer Entscheidung sicher sind..\n\nFür jeden Probanden wird dabei eine Datei erstellt, so dass der data-folder gerne mal wie in @fig-folder aussehen kann.\n\n![Ansicht des Daten-Ordners](../imgs/folder.png){#fig-folder}\n\nUm Auswertungen vorzubereiten müssen diese einzelnen Dateien erst mal zusammengefügt werden.\n\nDazu brauchen wir erst mal einen Vektor mit allen csv-files im Ordner:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # bei mir liegt der data-Ordner im Verzeichnis über dem in dem sich das Skript befindet\nlist.files(path = '../data/',\n           pattern = 'csv') %>% \n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:51] \"1_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv\" ...\n```\n:::\n:::\n\n\nDa bei mir ein relativer Pfad nötig ist würden die files so nicht gefunden werden, deswegen müssen wir noch das `full.names`-Argument auf `TRUE` setzen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(path = '../data/',\n           pattern = 'csv',\n           full.names = T) %>% \n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:51] \"../data//1_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv\" ...\n```\n:::\n:::\n\n\nDie so erstellten Pfade können wir dann im batch öffnen und einlesen. Dazu kann der wrapper `map_dfr` um `map` und `bind_rows` aus dem `purrr`-Paket helfen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_vpn <- list.files(path = '../data/',\n           pattern = 'csv',\n           full.names = T) %>% \n  map_dfr(~read_csv(.))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `dplyr::bind_rows()`:\n! Can't combine `..26$Ergebnisse_Loop.thisRepN` <double> and `..27$Ergebnisse_Loop.thisRepN` <character>.\n```\n:::\n:::\n\n\nDer Fehler kommt daher, dass einzelne Dokumente zu kurz sind und die Spaltentypen deswegen nicht erkannt werden. Hier gibt es drei Möglichkeiten mit dem Problem umzugehen:\n\nBei Psychopy kann der Fehler oben nur auftreten wenn\n\n1. etwas am Skript geändert wurde wodurch ein Datentyp in einer Datei nicht mehr stimmt. \n2. ein:e Proband:in vor dem ersten Trial eines Blocks abgebrochen hat.\n\nIm ersten Fall habt Ihr ganz andere Probleme und solltet im Detail darüber nachdenken wie ihr das löst - oder den unschönen Weg (\"The ugly\") wählen.\n\nIm zweiten Fall könnt Ihr alle zu kleinen files filtern (\"The good\") oder manuell (\"The bad\") die Spalten definieren.\n\n:::{.panel-tabset}\n### The good{#sec-good}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles <- tibble(\n  path = list.files(\n    path = '../data/',\n    pattern = 'csv',\n    full.names = T\n  ),\n  size = file.size(path)\n)\n\nfiles %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  path                                                         size\n  <chr>                                                       <dbl>\n1 ../data//1_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv   6597\n2 ../data//10_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv  6617\n3 ../data//11_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv  6609\n4 ../data//12_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv  6598\n5 ../data//13_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv  6599\n6 ../data//14_Experiment_Vorüberlegungen_2022_Feb_14_1902.csv  6594\n```\n:::\n\n```{.r .cell-code}\nall_vpn <- files %>% \n  filter(size > mean(size)) %>% \n  pull(path) %>% \n  map_dfr(~read_csv(.))\n```\n:::\n\n\n### The bad{#sec-bad}\n\nDie zweite Möglichkeit ist es, in read_csv die erwarteten Spalten-Typen anzugeben.\n\nIn meinem Fall sieht das so aus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_vpn <- list.files(path = '../data/',\n           pattern = 'csv',\n           full.names = T) %>% \n  map_dfr(~read_csv(.,col_types = 'cnnnncnncnccnnccccnl'))\n```\n:::\n\n\n\n### The ugly{#sec-ugly}\n\nDer uneleganteste Weg ist es erstmal alle Spalten als `character` zu importieren und dann die nötigen Spalten umzuwandeln:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_vpn <- list.files(path = '../data/',\n           pattern = 'csv',\n           full.names = T) %>% \n  map_dfr(~read_csv(.,col_types = cols(.default = 'c')))\n\nall_vpn %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 20,629\nColumns: 23\n$ Bild                             <chr> NA, \"Tabellen/45.png\", \"Tabellen/11.p…\n$ Ergebnisse_Loop.thisRepN         <chr> NA, \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"…\n$ Ergebnisse_Loop.thisTrialN       <chr> NA, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"…\n$ Ergebnisse_Loop.thisN            <chr> NA, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"…\n$ Ergebnisse_Loop.thisIndex        <chr> NA, \"44\", \"10\", \"32\", \"40\", \"16\", \"27…\n$ weiter_Willkommen.keys           <chr> \"space\", NA, NA, NA, NA, NA, NA, NA, …\n$ weiter_Willkommen.rt             <chr> \"5.486211061477661\", NA, NA, NA, NA, …\n$ Entscheidung.response            <chr> NA, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ Ergebnisse                       <chr> NA, \"anderer Test\", \"anderer Test\", \"…\n$ Sicherheit_Entscheidung.response <chr> NA, \"1\", \"3\", \"4\", \"1\", \"3\", \"3\", \"1\"…\n$ Sicherheit                       <chr> NA, \"sehr sicher\", \"unsicher\", \"gar n…\n$ key_resp.keys                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ key_resp.rt                      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ participant                      <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1…\n$ session                          <chr> \"001\", \"001\", \"001\", \"001\", \"001\", \"0…\n$ date                             <chr> \"2022_Feb_14_1853\", \"2022_Feb_14_1853…\n$ expName                          <chr> \"Experiment_Vorüberlegungen\", \"Experi…\n$ psychopyVersion                  <chr> \"2021.2.3\", \"2021.2.3\", \"2021.2.3\", \"…\n$ frameRate                        <chr> \"59.783176973314745\", \"59.78317697331…\n$ ...20                            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ RT                               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Accuracy                         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ group                            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n:::\n:::\n\n\nAus diesem Datensatz brauchen wählen wir dann die Spalten aus, die wir brauchen und wandeln die Reaktionszeiten um (und filtern leere Zeilen).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- all_vpn %>% \n  select(participant, Entscheidung.response, Ergebnisse, Sicherheit_Entscheidung.response, Sicherheit)\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 20,629\nColumns: 5\n$ participant                      <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1…\n$ Entscheidung.response            <chr> NA, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ Ergebnisse                       <chr> NA, \"anderer Test\", \"anderer Test\", \"…\n$ Sicherheit_Entscheidung.response <chr> NA, \"1\", \"3\", \"4\", \"1\", \"3\", \"3\", \"1\"…\n$ Sicherheit                       <chr> NA, \"sehr sicher\", \"unsicher\", \"gar n…\n```\n:::\n\n```{.r .cell-code}\ndf <- df %>% \n  mutate(across(matches('response'), ~as.numeric(.)),\n         participant = as.numeric(participant))\n\ndf <- df %>% \n  filter(!is.na(Ergebnisse))\n\ndf %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,205\nColumns: 5\n$ participant                      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Entscheidung.response            <dbl> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2…\n$ Ergebnisse                       <chr> \"anderer Test\", \"anderer Test\", \"ande…\n$ Sicherheit_Entscheidung.response <dbl> 1, 3, 4, 1, 3, 3, 1, 3, 1, 2, 2, 3, 1…\n$ Sicherheit                       <chr> \"sehr sicher\", \"unsicher\", \"gar nicht…\n```\n:::\n:::\n\n\n\n:::\n\n\nMit dem so umgewandelten Datensatz können wir dann wie gewohnt weiterarbeiten.\n\nZum Beispiel können wir uns die durchschnittliche Sicherheit pro Proband:in und Entscheidung ausgeben lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponse_summary <- df %>% \n  group_by(participant, Ergebnisse) %>% \n  summarise(Sicherheit = mean(Sicherheit_Entscheidung.response))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'participant'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nresponse_summary %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   participant [3]\n  participant Ergebnisse   Sicherheit\n        <dbl> <chr>             <dbl>\n1           1 anderer Test       2.65\n2           1 t-Test             2.57\n3           2 anderer Test       2.33\n4           2 t-Test             2.52\n5           3 anderer Test       2.18\n6           3 t-Test             2.54\n```\n:::\n:::\n\n\n\n## Zusammenfügen\n\nIn den meisten Fällen werdet Ihr neben Psychopy-Daten noch wo anders Fragebogen dargeboten haben, die Ihr mit den Daten zusammenfügen müsst.\n\nIn unserem Beispiel existiert eine `.xlsx`-Datei, die die Limesurvey-Ergebnisse beinhaltet.\n\nUm die zusammengefassten Ergebnisse an diese anzufügen müssen wir sie zuerst importieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimesurvey_results <- openxlsx::read.xlsx('../data/LimeSurvey Daten.xlsx')\n\nlimesurvey_results %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 50\nColumns: 4\n$ Bitte.geben.Sie.Ihr.Geschlecht.an. <chr> \"weiblich\", \"weiblich\", \"männlich\",…\n$ Bitte.geben.Sie.Ihr.Alter.an.      <dbl> 26, 18, 21, 21, 32, 32, 29, 29, 24,…\n$ `Was.machen.Sie.beruflich?`        <chr> \"Studium\", \"Studium\", \"Psychotherap…\n$ `VP-Nr`                            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, …\n```\n:::\n:::\n\n\nDie Zusammenfassungen sind noch im long-Format, können also nicht so einfach mit den LS-Daten im wide-Format zusammengeführt werden. Also erst einmal pivotieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponse_summary <- response_summary %>% \n  pivot_wider(names_from = 'Ergebnisse',\n              values_from = 'Sicherheit')\n\nresponse_summary %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   participant [6]\n  participant `anderer Test` `t-Test`\n        <dbl>          <dbl>    <dbl>\n1           1           2.65     2.57\n2           2           2.33     2.52\n3           3           2.18     2.54\n4           4           2.29     2.57\n5           5           2.24     2.54\n6           6           1.94     2.48\n```\n:::\n:::\n\n\nDie beiden Ergebnisse können wir jetzt kombinieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvp_level_data <- response_summary %>% \n  left_join(limesurvey_results,\n            by = c('participant' = 'VP-Nr'))\n\nvp_level_data %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 49\nColumns: 6\nGroups: participant [49]\n$ participant                        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, …\n$ `anderer Test`                     <dbl> 2.647059, 2.333333, 2.176471, 2.294…\n$ `t-Test`                           <dbl> 2.571429, 2.518519, 2.535714, 2.571…\n$ Bitte.geben.Sie.Ihr.Geschlecht.an. <chr> \"weiblich\", \"weiblich\", \"männlich\",…\n$ Bitte.geben.Sie.Ihr.Alter.an.      <dbl> 26, 18, 21, 21, 32, 32, 29, 29, 24,…\n$ `Was.machen.Sie.beruflich?`        <chr> \"Studium\", \"Studium\", \"Psychotherap…\n```\n:::\n:::\n\n\nAuf den Daten können wir dann arbeiten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvp_level_data %>% \n  select(where(is.numeric)) %>% \n  cor()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                              participant anderer Test      t-Test\nparticipant                    1.00000000  -0.29763927 -0.01798315\nanderer Test                  -0.29763927   1.00000000 -0.35251805\nt-Test                        -0.01798315  -0.35251805  1.00000000\nBitte.geben.Sie.Ihr.Alter.an. -0.09077279  -0.07051619  0.08474383\n                              Bitte.geben.Sie.Ihr.Alter.an.\nparticipant                                     -0.09077279\nanderer Test                                    -0.07051619\nt-Test                                           0.08474383\nBitte.geben.Sie.Ihr.Alter.an.                    1.00000000\n```\n:::\n:::\n\n\n\n## Aufgabe\n\n\n\n\n\n\n1. Im Repo zu diesem Skript ist eine zip-Datei mit simulierten Daten eines fiktiven Reaktionszeit-Experiments zu finden. Lade [die Zip](https://github.com/MBrede/r_thesis_tools/raw/main/data/data.zip) herunter und entpacke sie.\n\n2. Importiere die csv-Dateien in einen Datensatz\n\n3. Berechne Accuracy, mittlere Reaktionszeit und Standardabweichung der Reaktionszeit pro Proband:in\n\n4. Füge die Ergebnisse mit der LimeSurvey-`xlsx` zusammen und erstelle eine Zusammenfassung der Reaktionszeiten und Accuracy pro angegebenem Geschlecht",
    "supporting": [
      "wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}